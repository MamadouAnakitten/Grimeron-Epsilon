/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.arps.Grimeron.UI.Panels;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import javax.swing.DefaultListModel;
import org.arps.Grimeron.Grimeron;
import org.arps.Grimeron.entity.Player;
import org.arps.Grimeron.entity.Tile;
import org.arps.Grimeron.entity.custom.Bot;
import org.arps.Grimeron.entity.custom.Human;
import org.arps.Grimeron.utils.DBOperationHandler;
import org.arps.Grimeron.utils.RuleSet;

/**
 *
 * @author richa_000
 */
public class PlayerCreatorPanel extends javax.swing.JPanel {
    private Player createdPlayer;
    
    private Grimeron game;
    private GrimeronGrid grid;
    private DBOperationHandler dbHandler;
    private RuleSet ruleSet;
    private DefaultListModel playerListModel = new DefaultListModel();
    
    /**
     * Creates new form GrimeronPlayerCreator
     * @param game
     * @param setupFrame
     */
    public PlayerCreatorPanel(Grimeron game, GrimeronGrid grid) {
        this.game = game;
        this.grid = grid;
        this.dbHandler = game.getDBHandler();
        this.ruleSet = game.getRuleSet();
        initComponents();
        this.resetLocationSelector(grid);
        this.resetPlayerSelector();
        this.pc_botRadioButton.setSelected(true);
    }
    
    public PlayerCreatorPanel()
    {
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerSelectionGroup = new javax.swing.ButtonGroup();
        beginGame = new javax.swing.JButton();
        enterSetup = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        text_playerName = new javax.swing.JLabel();
        playerName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        playerType = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        playerColor = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        playerStartingX = new javax.swing.JLabel();
        playerStartingY = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList(playerListModel);
        jLabel8 = new javax.swing.JLabel();
        playerCreatorPanel = new javax.swing.JPanel();
        typeText = new javax.swing.JLabel();
        pc_botRadioButton = new javax.swing.JRadioButton();
        pc_humanRadioButton = new javax.swing.JRadioButton();
        pc_playerColorSelector = new javax.swing.JColorChooser();
        submitButton = new javax.swing.JButton();
        locationText = new javax.swing.JLabel();
        pc_locationCombo = new javax.swing.JComboBox();
        customXLabel = new javax.swing.JLabel();
        pc_customXSelector = new javax.swing.JTextField();
        customYLabel = new javax.swing.JLabel();
        pc_customYSelector = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pc_playerNameSelector = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        endGameButton = new javax.swing.JButton();

        beginGame.setText("Begin Game");
        beginGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginGameActionPerformed(evt);
            }
        });

        enterSetup.setText("Re-Enter Setup");
        enterSetup.setEnabled(false);
        enterSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterSetupActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(221, 221, 221)));

        text_playerName.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        text_playerName.setText("Player's Name: ");

        playerName.setText("No Player Selected");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Player's Type:");

        playerType.setText("No Player Selected");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Player's Color: ");

        playerColor.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout playerColorLayout = new javax.swing.GroupLayout(playerColor);
        playerColor.setLayout(playerColorLayout);
        playerColorLayout.setHorizontalGroup(
            playerColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        playerColorLayout.setVerticalGroup(
            playerColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Player's Starting X:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Player's Starting Y:");

        playerStartingX.setText("No Player Selected");

        playerStartingY.setText("No Player Selected");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(text_playerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerStartingX))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerStartingY)))
                        .addGap(0, 270, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_playerName)
                    .addComponent(playerName))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(playerType))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(playerColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(playerStartingX))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(playerStartingY))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Player Info");

        jLabel3.setText("[Show]");

        playerList.setBackground(new java.awt.Color(216, 216, 216));
        playerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playerList.setSelectionBackground(new java.awt.Color(51, 51, 255));
        playerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                playerListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(playerList);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Created Players:");

        playerCreatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Player Creator", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        typeText.setText("Type");

        playerSelectionGroup.add(pc_botRadioButton);
        pc_botRadioButton.setSelected(true);
        pc_botRadioButton.setText("Bot");

        playerSelectionGroup.add(pc_humanRadioButton);
        pc_humanRadioButton.setText("Human");

        submitButton.setText("Create Player");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        locationText.setText("Starting Location");

        customXLabel.setText("Custom X");

        pc_customXSelector.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pc_customXSelector.setText("Enter #");

        customYLabel.setText("Custom Y");

        pc_customYSelector.setText("Enter #");

        jLabel1.setText("Name:");

        pc_playerNameSelector.setText("Name");

        javax.swing.GroupLayout playerCreatorPanelLayout = new javax.swing.GroupLayout(playerCreatorPanel);
        playerCreatorPanel.setLayout(playerCreatorPanelLayout);
        playerCreatorPanelLayout.setHorizontalGroup(
            playerCreatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerCreatorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerCreatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pc_playerColorSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playerCreatorPanelLayout.createSequentialGroup()
                        .addGroup(playerCreatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(playerCreatorPanelLayout.createSequentialGroup()
                                .addComponent(typeText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pc_botRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pc_humanRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(locationText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pc_locationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(customXLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pc_customXSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(customYLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pc_customYSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, playerCreatorPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pc_playerNameSelector)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        playerCreatorPanelLayout.setVerticalGroup(
            playerCreatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerCreatorPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(playerCreatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeText)
                    .addComponent(pc_botRadioButton)
                    .addComponent(pc_humanRadioButton)
                    .addComponent(locationText)
                    .addComponent(pc_locationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customXLabel)
                    .addComponent(pc_customXSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customYLabel)
                    .addComponent(pc_customYSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerCreatorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pc_playerNameSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pc_playerColorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deleteButton.setText("Delete Player");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        endGameButton.setText("End Game");
        endGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endGameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(playerCreatorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(beginGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(enterSetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(endGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beginGame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterSetup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endGameButton))
                    .addComponent(playerCreatorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        Player.Type type = Player.Type.BOT; //Default to Bot
        Color color = Color.WHITE; //Default Color
        String name = pc_playerNameSelector.getText();
        ArrayList<Tile> freeTiles = grid.getLiveTiles();
        
        Tile startingTile = freeTiles.get(0);

        if(pc_humanRadioButton.isSelected()){
            type = Player.Type.HUMAN;
        } else {
            type = Player.Type.BOT;
        }

        if(StartingLocation.getLocationEnumOf((String)pc_locationCombo.getSelectedItem()).equals(StartingLocation.CUSTOM)){
            try{
                int x = Integer.parseInt(pc_customXSelector.getText());
                int y = Integer.parseInt(pc_customYSelector.getText());

                game.getRuleSet().incognitoMode = true;

                startingTile = grid.getTileAt(x, y);
            }catch(Exception ex){

            }
        }else{
            StartingLocation startEnum = StartingLocation.getLocationEnumOf((String)pc_locationCombo.getSelectedItem());
            startingTile = startEnum.toTile(grid);
        }

        try{
            int r = pc_playerColorSelector.getColor().getRed();
            int g = pc_playerColorSelector.getColor().getGreen();
            int b = pc_playerColorSelector.getColor().getBlue();

            color = new Color(r, g, b);
        }catch(Exception ex){
            color = Color.WHITE;
        }

        if(type.equals(Player.Type.BOT)){
            createdPlayer = new Bot(startingTile, name, dbHandler, grid, (int) Math.pow(grid.getMaxX(), 2));
        }

        if(type.equals(Player.Type.HUMAN)){
            createdPlayer = new Human(startingTile, name, grid);
        }
        createdPlayer.setColor(color);

        game.getRuleSet().addPlayer(createdPlayer);

        startingTile.setState(Tile.State.OCCUPIED);
        
        playerListModel.addElement(createdPlayer);
        
        resetPlayerCreator();
    }//GEN-LAST:event_submitButtonActionPerformed

    private void beginGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginGameActionPerformed
        if(!ruleSet.adminTestOverride)
        {
            verify();
        }
        for(Player player: ruleSet.getPlayers())
        {
            player.getTile().getUITile().repaint();
        }
        game.getGameFrame().unlockGame();
    }//GEN-LAST:event_beginGameActionPerformed

    private void playerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_playerListValueChanged
        try
        {
            Player selectedPlayer = (Player)playerList.getSelectedValue();
            
            playerName.setText(selectedPlayer.name);
            playerType.setText(selectedPlayer.getType().toString());
            playerColor.setBackground(selectedPlayer.getColor());
            playerStartingX.setText(Integer.toString(selectedPlayer.getTile().getGameX()));
            playerStartingY.setText(Integer.toString(selectedPlayer.getTile().getGameY()));
            
        } catch (ClassCastException | NullPointerException ex) {
            playerName.setText("No Player Selected");
            playerType.setText("No Player Selected");
            playerColor.setBackground(Color.LIGHT_GRAY);
            playerStartingX.setText("No Player Selected");
            playerStartingY.setText("No Player Selected");
        }
    }//GEN-LAST:event_playerListValueChanged

    private void enterSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterSetupActionPerformed
        Dimension loggedGridSize = new Dimension(game.getGameFrame().getGrid().getMaxX(), game.getGameFrame().getGrid().getMaxY());
        Dimension newGridSize;
        GameSetupDialogue gameSetup = new GameSetupDialogue(ruleSet);
        gameSetup.setVisible(true);
        newGridSize = new Dimension(ruleSet.dimensionSize, ruleSet.dimensionSize);
        
        if(!loggedGridSize.equals(newGridSize) && ruleSet.dimensionSize < 40)
        {
            GrimeronGrid newGrid = new GrimeronGrid(ruleSet.dimensionSize, ruleSet.dimensionSize);
            transferPlayers(newGrid);
            game.getGameFrame().setGrid(newGrid);
            StartingLocation.reassignLocations(newGrid);
        }
    }//GEN-LAST:event_enterSetupActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try{
            Player deletee = (Player) playerList.getSelectedValue();
            int deleteeIndex = playerList.getSelectedIndex();
            
            ruleSet.removePlayer(deletee);
            playerListModel.remove(deleteeIndex);
            
            resetPlayerSelector();
            resetPlayerInfo();
            resetLocationSelector(grid);
            resetPlayerCreator();
        } catch (Exception ex) {
            ex.printStackTrace();
            return;
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void endGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endGameButtonActionPerformed
        game.getGameFrame().dispose();
    }//GEN-LAST:event_endGameButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton beginGame;
    private javax.swing.JLabel customXLabel;
    private javax.swing.JLabel customYLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton endGameButton;
    private javax.swing.JButton enterSetup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel locationText;
    public javax.swing.JRadioButton pc_botRadioButton;
    private javax.swing.JTextField pc_customXSelector;
    private javax.swing.JTextField pc_customYSelector;
    public javax.swing.JRadioButton pc_humanRadioButton;
    public javax.swing.JComboBox pc_locationCombo;
    public javax.swing.JColorChooser pc_playerColorSelector;
    public javax.swing.JTextField pc_playerNameSelector;
    private javax.swing.JPanel playerColor;
    public javax.swing.JPanel playerCreatorPanel;
    private javax.swing.JList playerList;
    private javax.swing.JLabel playerName;
    private javax.swing.ButtonGroup playerSelectionGroup;
    private javax.swing.JLabel playerStartingX;
    private javax.swing.JLabel playerStartingY;
    private javax.swing.JLabel playerType;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel text_playerName;
    private javax.swing.JLabel typeText;
    // End of variables declaration//GEN-END:variables

    private void resetPlayerSelector()
    {
        playerListModel.clear(); 
        for(Player player: game.getRuleSet().getPlayers())
        {
            playerListModel.addElement(player);
        }
    }
    
    private void resetPlayerInfo()
    {
        this.playerName.setText("No Player Selected.");
        this.playerColor.setBackground(Color.LIGHT_GRAY);
        this.playerStartingX.setText("No Player Selected.");
        this.playerStartingY.setText("No Player Selected.");
        this.playerType.setText("No Player Selected.");
    }
    
    private void resetPlayerCreator()
    {
        Random random = new Random();
        pc_botRadioButton.setSelected(true);
        pc_customXSelector.setText("Enter #");
        pc_customYSelector.setText("Enter #");
        resetLocationSelector(this.grid);
        pc_locationCombo.setSelectedIndex(0);
        pc_playerColorSelector.setColor(new Color(random.nextInt(225), random.nextInt(225), random.nextInt(225)));
        pc_playerNameSelector.setText("Name");
    }
    
    private void resetLocationSelector(GrimeronGrid grid)
    {
        pc_locationCombo.removeAllItems();
        ArrayList<Tile> liveTiles = grid.getLiveTiles();
        
        Tile upperLeft = grid.getTopLeft();
            StartingLocation.UPPERLEFT.setCoord(upperLeft.getGameX(), upperLeft.getGameY());
        Tile upperRight = grid.getTopRight();
            StartingLocation.UPPERRIGHT.setCoord(upperRight.getGameX(), upperRight.getGameY());
        Tile lowerLeft = grid.getBottomLeft();
            StartingLocation.LOWERLEFT.setCoord(lowerLeft.getGameX(), lowerLeft.getGameY());
        Tile lowerRight = grid.getBottomRight();
            StartingLocation.LOWERRIGHT.setCoord(lowerRight.getGameX(), lowerRight.getGameY());
            
        if(liveTiles.contains(upperLeft)){ 
            pc_locationCombo.addItem(StartingLocation.UPPERLEFT.getDescription());
        }
        if(liveTiles.contains(upperRight)){
            pc_locationCombo.addItem(StartingLocation.UPPERRIGHT.getDescription());
        }
        if(liveTiles.contains(lowerLeft)){
            pc_locationCombo.addItem(StartingLocation.LOWERLEFT.getDescription());
        }
        if(liveTiles.contains(lowerRight)){
            pc_locationCombo.addItem(StartingLocation.LOWERRIGHT.getDescription());
        }
        
        pc_locationCombo.addItem(StartingLocation.CUSTOM.getDescription());
    }
    
    public Player getCreatedPlayer()
    {
        return this.createdPlayer;
    }

    public enum StartingLocation 
    {
        UPPERLEFT(0, 0, "Upper Left"), UPPERRIGHT(0, 0, "Upper Right"), LOWERLEFT(0, 0, "Lower Left"), LOWERRIGHT(0, 0, "Lower Right"), CUSTOM(0, 0, "Custom");
        
        private int x;
        private int y;
        private String description;  
        
        private StartingLocation(int x, int y, String description){
            this.x = x;
            this.y = y;
            this.description = description;
        }
        
        public void setCoord(int x, int y){
            this.x = x;
            this.y = y;
        }
        
        public void setCoord(Tile tile)
        {
            this.x = tile.getGameX();
            this.y = tile.getGameY();
        }
        
        public Point getCoord()
        {
            return new Point(this.x, this.y);
        }
        
        public int getX(){
            return this.x;
        }
        
        public int getY(){
            return this.y;
        }
        
        public Tile toTile(GrimeronGrid grid){
             return grid.getTileAt(x, y);
        }
        
        public String getDescription(){
            return this.description;
        }
        
        public void setDescription(String description){
            this.description = description;
        }
        
        /**
         * Attempts to find a starting location given the x and y.
         * @param x
         * @param y
         * @return
         */
        public StartingLocation tryGetStartingLocationOf(int x, int y)
        {
            for(StartingLocation loc: StartingLocation.values())
            {
                if(x == loc.x && y == loc.y) return loc;
            }
            CUSTOM.setCoord(x, y);
            return CUSTOM;
        }
        
        public static void reassignLocations(GrimeronGrid grid)
        {
            StartingLocation.LOWERLEFT.setCoord(grid.getBottomLeft());
            StartingLocation.LOWERRIGHT.setCoord(grid.getBottomRight());
            StartingLocation.UPPERLEFT.setCoord(grid.getTopLeft());
            StartingLocation.UPPERRIGHT.setCoord(grid.getTopRight());
            StartingLocation.CUSTOM.setCoord(0, 0);
        }
        
        public static StartingLocation getLocationEnumOf(String description){
            for(StartingLocation locationEnum: StartingLocation.values()){
                if(locationEnum.getDescription().equals(description)){
                    return locationEnum;
                }
            }
            return null;
        }
    }
    
    public void reload()
    {
        this.resetPlayerSelector();
        this.resetLocationSelector(this.grid);
        this.resetPlayerCreator();
    }
    
    public void transferPlayers(GrimeronGrid newGrid)
    {
        int playerX, playerY;
        int locX, locY;
        
        
        for(Player player: ruleSet.getPlayers())
        {
            playerX = player.getTile().getGameX(); 
            playerY = player.getTile().getGameY();
            
            for(StartingLocation loc: StartingLocation.values())
            {
                locX = loc.getX();
                locY = loc.getY();
                
                if(playerX == locX && playerY == locY)
                {
                    if(loc.equals(StartingLocation.LOWERLEFT)) player.setTile(newGrid.getBottomLeft());
                    if(loc.equals(StartingLocation.LOWERRIGHT)) player.setTile(newGrid.getBottomRight());
                    if(loc.equals(StartingLocation.UPPERLEFT)) player.setTile(newGrid.getTopLeft());
                    if(loc.equals(StartingLocation.UPPERRIGHT)) player.setTile(newGrid.getTopRight());
                    else{
                        if(playerX < newGrid.getMaxX() && playerY < newGrid.getMaxY())
                        {
                            player.setTile(newGrid.getTileAt(playerX, playerY));
                        }else{
                            Random random = new Random();
                            player.setTile(newGrid.getTileAt(random.nextInt(newGrid.getMaxX()), random.nextInt(newGrid.getMaxY())));
                        }
                    }
                }      
            }
            
            player.getTile().setColor(player.getColor());
        }
    }
    
    private void verify()
    {       
        if(ruleSet.getPlayers().size() == 1)
        {
            Bot a = new Bot(grid.getBottomRight(), "Red", dbHandler, grid);
            
            ruleSet.addPlayer(a);
            
            ruleSet.getPlayers().get(0).getTile().setState(Tile.State.OPEN);
            ruleSet.getPlayers().get(0).setStartingTile(grid.getTopLeft());
            ruleSet.getPlayers().get(0).setTile(grid.getTopLeft());
        }
        
        if(ruleSet.rapidMode)
        {
            for (Iterator<Player> it = ruleSet.getPlayers().iterator(); it.hasNext();) 
            {
                Player player = it.next();
                if(player.getType().equals(Player.Type.HUMAN))
                {
                    it.remove();
                }
            }
            
            if(ruleSet.getPlayers().size() < 2)
            {
                ruleSet.getPlayers().clear();
                Bot a = new Bot(game.getGameFrame().getGamePanel().getGrid().getTopLeft(), "Red", dbHandler, grid); //Top Left
                Bot b = new Bot(game.getGameFrame().getGamePanel().getGrid().getTopRight(), "Orange", dbHandler, grid); //Top Right
                Bot c = new Bot(game.getGameFrame().getGamePanel().getGrid().getBottomLeft(), "Yellow", dbHandler, grid); //Bottom Left
                Bot d = new Bot(game.getGameFrame().getGamePanel().getGrid().getBottomRight(), "Blue", dbHandler, grid); //Botton Right
                
                a.setColor(Color.RED);
                b.setColor(Color.ORANGE);
                c.setColor(Color.YELLOW);
                d.setColor(Color.BLUE);
        
                ruleSet.assignPlayers(a, b, c, d);
            }
        }
        
        if(!ruleSet.rapidMode)
        {
            if(ruleSet.getPlayers().size() < 2)
            {
                ruleSet.getPlayers().clear();
                Bot a = new Bot(game.getGameFrame().getGamePanel().getGrid().getTopLeft(), "Red", dbHandler, grid); //Top Left
                Bot b = new Bot(game.getGameFrame().getGamePanel().getGrid().getTopRight(), "Orange", dbHandler, grid); //Top Right
                Bot c = new Bot(game.getGameFrame().getGamePanel().getGrid().getBottomLeft(), "Yellow", dbHandler, grid); //Bottom Left
                Human d = new Human(game.getGameFrame().getGamePanel().getGrid().getBottomRight(), "Blue", grid); //Bottom Right
                
                a.setColor(Color.RED);
                b.setColor(Color.ORANGE);
                c.setColor(Color.YELLOW);
                d.setColor(Color.BLUE);
        
                ruleSet.assignPlayers(a, b, c, d);
            }
        }
    }
}
